# If the lengths of parts equal to the length of components, then it is part of the table
if (parts[1] %in% days) {
# Combine the 1st, 2nd, 3rd components to form one string for Date
parts[1] <- paste(parts[1],parts[2], parts[3], sep = " ")
# Remove the 2nd, 3rd components which are already merged into the 1st component Date
parts <- parts[-c(2,3)]
# Create a data frame to hold each test record title and values
df <- data.frame()
# Add the values into the created data frame
df <- rbind(df, parts)
# Add header to the data frame
names(df) <- header
# Insert the data frame into the data array
data[[i]] <- df
}
## If not, add it as a comment
else {
df <- cbind(df, Comment = line)
# Insert the data frame into the data array
data[[i]] <- df
}
}
}
i
line <- strsplit(rawdata[i],split="^\\s+")
line[[1]][1] == ""
line
rawdata <- readLines("play.txt")
rawdata
getwd()
readLines("play.txt")
source('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
write.csv(data, file = "newfile", row.names = TRUE, sep = ',', col.names = TRUE)
write.csv(data, file = "newfile", sep = ',', col.names = TRUE)
write.csv(data, file = "newfile")
write.table(data,file = "newfile")
require(reshape2)
data$id <- rownames(data)
melt(data)
data
write.table(data[[273]],file = "newfile")
write.table(data[[273]],file = "newfile.csv")
write.csv(data[[273]],file = "newfile.csv")
data[[272]]
data[[271]]
write.csv(data[[271]],file = "newfile.csv")
write.table(data[[273]],file = "newfile.csv",append = True)
write.table(data[[273]],file = "newfile.csv",append = a)
write.table(data[[273]],file = "newfile.csv",append = "a")
write.table(data[[273]],file = "newfile.csv",append = "w")
write.table(data[[273]],file = "newfile.csv",append = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.csv(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.csv(data[[273]],file = "newfile.csv",append = TRUE)
write.csv(data[[273]],file = "newfile.csv")
write.csv(data[[273]],file = "newfile.csv",append = T)
write.csv(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = T,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.csv(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = " ")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "\n")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = """")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "''")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "\t")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "\t",quote = F)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "\t",quote = F,eol = "\r")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "\t",quote = F,eol = "\r\n")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = ",",quote = F,eol = "\r\n")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = ",",quote = F)
write.table(data[[273]],file = "newfile.csv",append = TRUE,sep = ",",quote = F)
data[[273]]
data[[271]]
data[[271]][1]
gsub(','," ",data[[271]][1])
x <- gsub(','," ",data[[271]][1])
x
x <- gsub(","," ",data[[271]][1])
x
x <- gsub("15"," ",data[[271]][1])
x
x <- gsub("15"," ",as.character(data[[271]][1]))
x
line
x <- gsub("15"," ",as.character(line)
x <- gsub(","," ",line
x <- gsub(","," ",line)
x
x <- gsub("'","",line)
x
source('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
line
data[[273]]
i
line <- strsplit(rawdata[i],split="^\\s+")
line <- line[[1]][1] # Get the substance of the parts
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
line
line <- gsub(","," ",line)
line
line <- gsub("'","",line)
parts_components <- strsplit(line," ")[[1]] # Convert the string of parts to a vector holding individual components
parts <- tapply(parts_components,seq(1:length(parts_components)),paste)
parts[1]
parts[1] <- paste(parts[1],parts[2], parts[3], sep = " ")
parts[1]
parts[4]
source('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
data[[273]]
write.table(data[[273]],file = "newfile.csv",append = TRUE,sep = ",",quote = F)
write.table(data[[273]][1],file = "newfile.csv",append = TRUE,sep = ",",quote = F)
data[[273]]
data[[273]]$1
write.table(data[[273]][1],file = "newfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
write.table(data[[273]],file = "newfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
for (i in 1: length(data)) {
write.table(data[[i]],file = "newfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
}
data <- data[sapply(data, nchar) > 0]
data[[272]]
data[[272]] == NULL
data[[272]] != NULL
logical(0)
is.null(data[[272]])
!is.null(data[[272]])
for (i in 1: length(data)) {
if (!is.null(data[[272]]) ) {
write.table(data[[i]],file = "newfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
}
}
for (i in 1: length(data)) {
if (!is.null(data[[i]]) ) {
write.table(data[[i]],file = "newfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
}
}
for (i in 1: length(data)) {
if (!is.null(data[[i]]) ) {
write.table(data[[i]],file = "exportfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
}
}
getwd()
setwd("~/Dingchao/Courses/R/RShinyDash/Dashboard")
load("~/Dingchao/Courses/R/R Programming/Assignments/.RData")
setwd("~/Dingchao/Courses/R/R Programming/Assignments")
source('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
source('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
# A list contain the transformed data as the output
exploaded_data <- list()
i = 1
line <- strsplit(rawdata[i],split="^\\s+")
line
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header_components <- strsplit(line," ")[[1]]
header_components
"Date"%in% header_components
"Date "%in% header_components
class(header_components)
typeo(header_components)
typeof(header_components)
header <- tapply(header_components,seq(1:length(header_components)),paste)
header
"Date "%in% header
"Date"%in% header
master_header <- tapply(header_components,seq(1:length(header_components)),paste)
i=3
line <- strsplit(rawdata[i],split="^\\s+")
line
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header_components <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
header <- tapply(header_components,seq(1:length(header_components)),paste) # Cr
header %in% master)header
header %in% master_header
master_header <- header
i = 325
line <- strsplit(rawdata[i],split="^\\s+")
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header_components <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
header <- tapply(header_components,seq(1:length(header_components)),paste) # Create an array to hol
header %in% master_header
header
i = 326
line <- strsplit(rawdata[i],split="^\\s+")
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header_components <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
header <- tapply(header_components,seq(1:length(header_components)),paste) # Create an array to hold individual components of header
header
rawdata[326]
rawdata[36]
rawdata[5]
rawdata[10]
i = 10
line <- strsplit(rawdata[i],split="^\\s+")
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header_components <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
header <- tapply(header_components,seq(1:length(header_components)),paste) #
header %in% master_header
header
master_header
a <- header
header <- master_header
master_header <- a
header %in% master_header
master_header
master_header = c(master_header,"test")
master_header
master_header = c(master_header,header[header %in% master_header])
master_header
master_header = c(master_header,header[header %not in% master_header])
master_header = c(master_header,header[-(header %in% master_header)])
master_header
#  Create a data frame containig all data records into one table
for(i in 1 : length(rawdata)) {
# Replace
line <- strsplit(rawdata[i],split="^\\s+")
# If there is a blank space in the starting trailing space, then it is a row of title
if (line[[1]][1] == "") {
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
if (i == 1) {  # Create a master header
master_header <- header
}
# Append master_header with the column names in header but not in master_header yet
master_header = c(master_header,header[-(header %in% master_header)])
}
else{
line <- line[[1]][1] # Get the substance of the parts
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
line <- gsub(","," ",line) # Replace the , with blank space
line <- gsub("'","",line) # Remove the '
parts <- strsplit(line," ")[[1]] # Convert the string of parts to a vector holding individual components
#parts <- tapply(parts_components,seq(1:length(parts_components)),paste)
# Watch out for the memory difference between parts and parts_components
# If the lengths of parts equal to the length of components, then it is part of the table
if (parts[1] %in% days) {
# Combine the 1st, 2nd, 3rd components to form one string for Date
parts[1] <- paste(parts[1],parts[2], parts[3], parts[4],sep = " ")
# Remove the 2nd, 3rd components which are already merged into the 1st component Date
parts <- parts[-c(2,3,4)]
# Create a data frame to hold each test record title and values
df <- data.frame()
# Add the values into the created data frame
df <- rbind(df, parts)
# Add header to the data frame
names(df) <- header
# Insert the data frame into the data array
exploded_data[[i]] <- df
}
## If not, add it as a comment
else {
df <- cbind(df, Comment = line)
# Insert the data frame into the data array
exploded_data[[i]] <- df
}
}
}
exploaded_data <- list()
#  Create a data frame containig all data records into one table
for(i in 1 : length(rawdata)) {
# Replace
line <- strsplit(rawdata[i],split="^\\s+")
# If there is a blank space in the starting trailing space, then it is a row of title
if (line[[1]][1] == "") {
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
if (i == 1) {  # Create a master header
master_header <- header
}
# Append master_header with the column names in header but not in master_header yet
master_header = c(master_header,header[-(header %in% master_header)])
}
else{
line <- line[[1]][1] # Get the substance of the parts
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
line <- gsub(","," ",line) # Replace the , with blank space
line <- gsub("'","",line) # Remove the '
parts <- strsplit(line," ")[[1]] # Convert the string of parts to a vector holding individual components
#parts <- tapply(parts_components,seq(1:length(parts_components)),paste)
# Watch out for the memory difference between parts and parts_components
# If the lengths of parts equal to the length of components, then it is part of the table
if (parts[1] %in% days) {
# Combine the 1st, 2nd, 3rd components to form one string for Date
parts[1] <- paste(parts[1],parts[2], parts[3], parts[4],sep = " ")
# Remove the 2nd, 3rd components which are already merged into the 1st component Date
parts <- parts[-c(2,3,4)]
# Create a data frame to hold each test record title and values
df <- data.frame()
# Add the values into the created data frame
df <- rbind(df, parts)
# Add header to the data frame
names(df) <- header
# Insert the data frame into the data array
exploded_data[[i]] <- df
}
## If not, add it as a comment
else {
df <- cbind(df, Comment = line)
# Insert the data frame into the data array
exploded_data[[i]] <- df
}
}
}
exploded_data <- list()
#  Create a data frame containig all data records into one table
for(i in 1 : length(rawdata)) {
# Replace
line <- strsplit(rawdata[i],split="^\\s+")
# If there is a blank space in the starting trailing space, then it is a row of title
if (line[[1]][1] == "") {
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
if (i == 1) {  # Create a master header
master_header <- header
}
# Append master_header with the column names in header but not in master_header yet
master_header = c(master_header,header[-(header %in% master_header)])
}
else{
line <- line[[1]][1] # Get the substance of the parts
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
line <- gsub(","," ",line) # Replace the , with blank space
line <- gsub("'","",line) # Remove the '
parts <- strsplit(line," ")[[1]] # Convert the string of parts to a vector holding individual components
#parts <- tapply(parts_components,seq(1:length(parts_components)),paste)
# Watch out for the memory difference between parts and parts_components
# If the lengths of parts equal to the length of components, then it is part of the table
if (parts[1] %in% days) {
# Combine the 1st, 2nd, 3rd components to form one string for Date
parts[1] <- paste(parts[1],parts[2], parts[3], parts[4],sep = " ")
# Remove the 2nd, 3rd components which are already merged into the 1st component Date
parts <- parts[-c(2,3,4)]
# Create a data frame to hold each test record title and values
df <- data.frame()
# Add the values into the created data frame
df <- rbind(df, parts)
# Add header to the data frame
names(df) <- header
# Insert the data frame into the data array
exploded_data[[i]] <- df
}
## If not, add it as a comment
else {
df <- cbind(df, Comment = line)
# Insert the data frame into the data array
exploded_data[[i]] <- df
}
}
}
master_header
a <- "cell"
a <- c(a,header[-(header %in% master_header)])
a
master_header
header
header %in% master_header
header[-(header %in% master_header)]
header[(header %in% master_header)]
header[-(header %in% master_header)]
header[TRUE]
header[TRUE,TRUE]
header[False]
header[FALSE]
header[-TRUE]
header[-c(header %in% master_header)]
header[c(header %in% master_header)]
paste(union(a, header]
paste(union(a, header))
#  Create a data frame containig all data records into one table
for(i in 1 : length(rawdata)) {
# Replace
line <- strsplit(rawdata[i],split="^\\s+")
# If there is a blank space in the starting trailing space, then it is a row of title
if (line[[1]][1] == "") {
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
if (i == 1) {  # Create a master header
master_header <- header
}
# Append master_header with the column names in header but not in master_header yet
#master_header = c(master_header,header[-(header %in% master_header)])
master_header = paste(union(master_header, header))
}
else{
line <- line[[1]][1] # Get the substance of the parts
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
line <- gsub(","," ",line) # Replace the , with blank space
line <- gsub("'","",line) # Remove the '
parts <- strsplit(line," ")[[1]] # Convert the string of parts to a vector holding individual components
#parts <- tapply(parts_components,seq(1:length(parts_components)),paste)
# Watch out for the memory difference between parts and parts_components
# If the lengths of parts equal to the length of components, then it is part of the table
if (parts[1] %in% days) {
# Combine the 1st, 2nd, 3rd components to form one string for Date
parts[1] <- paste(parts[1],parts[2], parts[3], parts[4],sep = " ")
# Remove the 2nd, 3rd components which are already merged into the 1st component Date
parts <- parts[-c(2,3,4)]
# Create a data frame to hold each test record title and values
df <- data.frame()
# Add the values into the created data frame
df <- rbind(df, parts)
# Add header to the data frame
names(df) <- header
# Insert the data frame into the data array
exploded_data[[i]] <- df
}
## If not, add it as a comment
else {
df <- cbind(df, Comment = line)
# Insert the data frame into the data array
exploded_data[[i]] <- df
}
}
}
master_header
#  Create a data frame containig all data records into one table
for(i in 1 : length(rawdata)) {
# Replace
line <- strsplit(rawdata[i],split="^\\s+")
# If there is a blank space in the starting trailing space, then it is a row of title
if (line[[1]][1] == "") {
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
if (i == 1) {  # Create a master header
master_header <- header
}
# Append master_header with the column names in header but not in master_header yet
#master_header = c(master_header,header[-(header %in% master_header)])
#master_header = paste(union(master_header, header))
master_header = c(union(master_header, header))
}
else{
line <- line[[1]][1] # Get the substance of the parts
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
line <- gsub(","," ",line) # Replace the , with blank space
line <- gsub("'","",line) # Remove the '
parts <- strsplit(line," ")[[1]] # Convert the string of parts to a vector holding individual components
#parts <- tapply(parts_components,seq(1:length(parts_components)),paste)
# Watch out for the memory difference between parts and parts_components
# If the lengths of parts equal to the length of components, then it is part of the table
if (parts[1] %in% days) {
# Combine the 1st, 2nd, 3rd components to form one string for Date
parts[1] <- paste(parts[1],parts[2], parts[3], parts[4],sep = " ")
# Remove the 2nd, 3rd components which are already merged into the 1st component Date
parts <- parts[-c(2,3,4)]
# Create a data frame to hold each test record title and values
df <- data.frame()
# Add the values into the created data frame
df <- rbind(df, parts)
# Add header to the data frame
names(df) <- header
# Insert the data frame into the data array
exploded_data[[i]] <- df
}
## If not, add it as a comment
else {
df <- cbind(df, Comment = line)
# Insert the data frame into the data array
exploded_data[[i]] <- df
}
}
}
master_header
b = c(union(b, header))
cm <- ""
creat_Masterheader <- function(x,cm) {
# Replace
line <- strsplit(x,split="^\\s+")
# If there is a blank space in the starting trailing space, then it is a row of title
if (line[[1]][1] == "") {
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
# Append master_header with the column names in header but not in master_header yet
cm = c(union(cm, header))
}
return cm
}
creat_Masterheader <- function(x,cm) {
# Replace
line <- strsplit(x,split="^\\s+")
# If there is a blank space in the starting trailing space, then it is a row of title
if (line[[1]][1] == "") {
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
# Append master_header with the column names in header but not in master_header yet
cm = c(union(cm, header))
}
return (cm)
}
sapply(data, creat_Masterheader(data,cm), collapse=", "))
sapply(data, creat_Masterheader(data,cm), collapse=", ")
sapply(data, creat_Masterheader(data,cm), collapse=", ")
debugSource('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
sapply(data, creat_Masterheader(data,cm), collapse=", ")
x
apply(data, creat_Masterheader(data,cm), collapse=", ")
lapply(data, creat_Masterheader(data,cm), collapse=", ")
vapply(data, creat_Masterheader(data,cm), collapse=", ")
