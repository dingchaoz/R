thd = c(2215,1125,1500,-30,-5,1000,0)
c = c("gold","dark green","green","blue","purple","pink","red")
lab = c("USL","USL","USL","LSL","LSL","USL","LSL")
## Creat plot 5 to show the recorded max,min,mea variance box for all System Error, that NA is as blank
pd <- position_dodge(.1)
ggplot(data, aes(x=Test_No, y=Mean, colour=System_Error,group = System_Error)) +
geom_point(aes(y= Mean,shape = System_Error))+
geom_pointrange(aes(ymin=Min, ymax=Max), width=.1, position=pd) +
geom_hline(yintercept = th,color = c,linetype = "longdash") +
geom_text(aes(8,thd,label = lab, vjust = -1)) +
ylim(-35,2000) +
labs(title="MinMaxMean Range Plot of All SEIDs") +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=9))
ggsave("AcadiaDOE/Rexport/MinMaxMeanRange_allSE_withSpecs.png")
thd = c(2215,1125,1500,-30,-5,1000,0)
c = c("gold","dark green","green","blue","purple","pink","red")
lab = c("USL","USL","USL","LSL","LSL","USL","LSL")
## Creat plot 5 to show the recorded max,min,mea variance box for all System Error, that NA is as blank
pd <- position_dodge(.1)
ggplot(data, aes(x=Test_No, y=Mean, colour=System_Error,group = System_Error)) +
geom_point(aes(y= Mean,shape = System_Error))+
geom_pointrange(aes(ymin=Min, ymax=Max), width=.1, position=pd) +
geom_hline(yintercept = th,color = c,linetype = "longdash") +
geom_text(aes(8,thd,label = lab, vjust = -1)) +
ylim(-35,2000) +
labs(title="MinMaxMean Range Plot of All SEIDs") +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=9))
ggsave("AcadiaDOE/Rexport/MinMaxMeanRange_allSE_withSpecs.png")
len(c)
length(c)
length(thd)
length(lab)
library(zoo)
library(ggplot2)
# Read AcadiaDOE.csv using read.csv as a dataframe with 13 variables
data <- read.csv("AcadiaDOE/AcadiaDOE.csv",header = TRUE,stringsAsFactors=FALSE)
## Order by SEID and create to a new data frame
data2 <- data[order(data$SEID),]
# Use na.locf function from zoo package to replace NA with the lastest Non-NA value
data2 <- na.locf(data2)
# Numericalize columns
data2$Ppk <- as.numeric(data2$Ppk)
data2$Max <- as.numeric(data2$Max)
data2$Min <- as.numeric(data2$Min)
data2$Mean <- as.numeric(data2$Mean)
data2$Std <- as.numeric(data2$Std)
thd = c(2215,1125,1500,-30,-5,1000,0)
c = c("gold","dark green","green","blue","purple","pink","red")
lab = c("USL","USL","USL","LSL","LSL","USL","LSL")
## Creat plot 5 to show the recorded max,min,mea variance box for all System Error, that NA is as blank
pd <- position_dodge(.1)
ggplot(data, aes(x=Test_No, y=Mean, colour=System_Error,group = System_Error)) +
geom_point(aes(y= Mean,shape = System_Error))+
geom_pointrange(aes(ymin=Min, ymax=Max), width=.1, position=pd) +
geom_hline(yintercept = th,color = c,linetype = "longdash") +
geom_text(aes(8,thd,label = lab, vjust = -1)) +
ylim(-35,2000) +
labs(title="MinMaxMean Range Plot of All SEIDs") +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=9))
ggsave("AcadiaDOE/Rexport/MinMaxMeanRange_allSE_withSpecs.png")
thd = c(2215,1125,1500,-30,-5,1000,0)
c = c("gold","dark green","green","blue","purple","pink","red")
lab = c("USL","USL","USL","LSL","LSL","USL","LSL")
## Creat plot 5 to show the recorded max,min,mea variance box for all System Error, that NA is as blank
pd <- position_dodge(.1)
ggplot(data, aes(x=Test_No, y=Mean, colour=System_Error,group = System_Error)) +
geom_point(aes(y= Mean,shape = System_Error))+
geom_pointrange(aes(ymin=Min, ymax=Max), width=.1, position=pd) +
geom_hline(yintercept = thd,color = c,linetype = "longdash") +
geom_text(aes(8,thd,label = lab, vjust = -1)) +
ylim(-35,2000) +
labs(title="MinMaxMean Range Plot of All SEIDs") +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=9))
ggsave("AcadiaDOE/Rexport/MinMaxMeanRange_allSE_withSpecs.png")
library(zoo)
library(ggplot2)
# Read AcadiaDOE.csv using read.csv as a dataframe with 13 variables
data <- read.csv("AcadiaDOE/AcadiaDOE.csv",header = TRUE,stringsAsFactors=FALSE)
## Order by SEID and create to a new data frame
data2 <- data[order(data$SEID),]
# Use na.locf function from zoo package to replace NA with the lastest Non-NA value
data2 <- na.locf(data2)
# Numericalize columns
data2$Ppk <- as.numeric(data2$Ppk)
data2$Max <- as.numeric(data2$Max)
data2$Min <- as.numeric(data2$Min)
data2$Mean <- as.numeric(data2$Mean)
data2$Std <- as.numeric(data2$Std)
thd = c(2215,1125,1500,-30,-5,1000,0)
c = c("gold","dark green","green","blue","purple","pink","red")
lab = c("USL","USL","USL","LSL","LSL","USL","LSL")
## Creat plot 5 to show the recorded max,min,mea variance box for all System Error, that NA is as blank
pd <- position_dodge(.1)
ggplot(data, aes(x=Test_No, y=Mean, colour=System_Error,group = System_Error)) +
geom_point(aes(y= Mean,shape = System_Error))+
geom_pointrange(aes(ymin=Min, ymax=Max), width=.1, position=pd) +
geom_hline(yintercept = thd,color = c,linetype = "longdash") +
geom_text(aes(8,thd,label = lab, vjust = -1)) +
ylim(-35,2000) +
labs(title="MinMaxMean Range Plot of All SEIDs") +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=9))
ggsave("AcadiaDOE/Rexport/MinMaxMeanRange_allSE_withSpecs.png")
## Creat plot 5 to show the recorded max,min,mea variance box for all System Error, that NA is as blank
pd <- position_dodge(.1)
ggplot(data, aes(x=Test_No, y=Mean, colour=System_Error,group = System_Error)) +
geom_point(aes(y= Mean,shape = System_Error))+
geom_pointrange(aes(ymin=Min, ymax=Max), width=.1, position=pd) +
geom_hline(yintercept = c(2215,1125,1500,-30,-5,1000,0),color = c,linetype = "longdash") +
geom_text(aes(8,thd,label = lab, vjust = -1)) +
ylim(-35,2000) +
labs(title="MinMaxMean Range Plot of All SEIDs") +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=9))
ggsave("AcadiaDOE/Rexport/MinMaxMeanRange_allSE_withSpecs.png")
## Creat plot 5 to show the recorded max,min,mea variance box for all System Error, that NA is as blank
pd <- position_dodge(.1)
ggplot(data, aes(x=Test_No, y=Mean, colour=System_Error,group = System_Error)) +
geom_point(aes(y= Mean,shape = System_Error))+
geom_pointrange(aes(ymin=Min, ymax=Max), width=.1, position=pd) +
geom_hline(yintercept = c(2215,1125,1500,-30,-5,1000,0),color = c,linetype = "longdash") +
geom_text(aes(c(8,8,8,8,8,8,8),thd,label = lab, vjust = -1)) +
ylim(-35,2000) +
labs(title="MinMaxMean Range Plot of All SEIDs") +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=9))
ggsave("AcadiaDOE/Rexport/MinMaxMeanRange_allSE_withSpecs.png")
# Creat plot 5 to show the recorded max,min,mea variance box for all System Error, that NA is as blank
pd <- position_dodge(.1)
ggplot(data, aes(x=Test_No, y=Mean, colour=System_Error,group = System_Error)) +
geom_point(aes(y= Mean,shape = System_Error))+
geom_pointrange(aes(ymin=Min, ymax=Max), width=.1, position=pd) +
geom_hline(yintercept = c(2215,1125,1500,-30,-5,1000,0),color = c,linetype = "longdash") +
geom_text(aes(8,thd,label = lab, vjust = -1)) +
ylim(-35,2000) +
labs(title="MinMaxMean Range Plot of All SEIDs") +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=9))
ggsave("AcadiaDOE/Rexport/MinMaxMeanRange_allSE_withSpecs.png")
## Import two libaries
library(zoo)
library(ggplot2)
# Read AcadiaDOE.csv using read.csv as a dataframe with 13 variables
data <- read.csv("AcadiaDOE/AcadiaDOE.csv",header = TRUE,stringsAsFactors=FALSE)
## Order by SEID and create to a new data frame
data2 <- data[order(data$SEID),]
# Use na.locf function from zoo package to replace NA with the lastest Non-NA value
data2 <- na.locf(data2)
# Numericalize columns
data2$Ppk <- as.numeric(data2$Ppk)
data2$Max <- as.numeric(data2$Max)
data2$Min <- as.numeric(data2$Min)
data2$Mean <- as.numeric(data2$Mean)
data2$Std <- as.numeric(data2$Std)
thd = c(2215,1125,1500,-30,-5,1000,0)
c = c("gold","dark green","green","blue","purple","pink","red")
lab = c("USL","USL","USL","LSL","LSL","USL","LSL")
## Creat plot 5 to show the recorded max,min,mea variance box for all System Error, that NA is as blank
pd <- position_dodge(.1)
ggplot(data, aes(x=Test_No, y=Mean, colour=System_Error,group = System_Error)) +
geom_point(aes(y= Mean,shape = System_Error))+
geom_pointrange(aes(ymin=Min, ymax=Max), width=.1, position=pd) +
geom_hline(yintercept = c(2215,1125,1500,-30,-5,1000,0),color = c,linetype = "longdash") +
geom_text(aes(8,thd,label = lab, vjust = -1)) +
ylim(-35,2000) +
labs(title="MinMaxMean Range Plot of All SEIDs") +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=9))
ggsave("AcadiaDOE/Rexport/MinMaxMeanRange_allSE_withSpecs.png")
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
input$Trucks
trucks
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
DiagList
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('SetConn.R')
getwd()
source('/Shiny-dev/SelfTest/Version2/SetConn.R')
source('~/Shiny-dev/SelfTest/Version2/SetConn.R')
getwd()
source('~Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/SetConn.R')
source('C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/SetConn.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version1/app2.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
list.files
getwd()
list.dirs <- function(path=".", pattern=NULL, all.dirs=FALSE,
full.names=FALSE, ignore.case=FALSE) {
# use full.names=TRUE to pass to file.info
all <- list.files(path, pattern, all.dirs,
full.names=TRUE, recursive=FALSE, ignore.case)
dirs <- all[file.info(all)$isdir]
# determine whether to return full names or just dir names
if(isTRUE(full.names))
return(dirs)
else
return(basename(dirs))
}
list.dirs("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments")
list.dirs("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/Vesion2")
list.dirs("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Vesion2")
list.dirs("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2")
source("ListDir.R")
source("/ListDir.R")
getwd()
source("/ListDir.R")
source("ListDir.R")
setwd(CodeDir)
CodeDir <- "C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2"
setwd(CodeDir)
setwd(CodeDir)
source("ListDir.R")
list.dirs(CodeDir)
file.sources = list.files(list.dirs(CodeDir),
pattern="*.R$", full.names=TRUE,
ignore.case=TRUE)
sapply(file.sources,source,.GlobalEnv)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/.active-rstudio-document')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
debugSource('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
UpdateConn(input,session)
output$print <- renderPlot({
b <- length(input$Trucks)
qplot(input$Trucks,y = b,geom ="point")
## Render this exact function that takes the transformed input in the above
#ggplot(data, aes(y=b)) +
#   geom_histogram(y=b)
})
output$data <- renderPlot({
Hisplot(input)
})
}
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version1/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
conn
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version1/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R', echo=TRUE)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R', echo=TRUE)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R', echo=TRUE)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
UICreate()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/.active-rstudio-document')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
a <- list(conn,PrgMap)
a
conn <-odbcConnect("Capability")
PrgMap <- list(Programs = c("Seahawk", "DragonCC"), Database = c("Seahawk", "DragonCC"))
a <- list(conn,PrgMap)
a$conn
conn
a[1]
a["conn"]
a[conn]
a(conn)
a
a["conn"]
a[[1]]
a[[2]]
a <- list(conn = conn,PrgMap = PrgMap)
a[conn]
a["conn"]
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
meta <- InitConn()
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version1/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
library(shiny)
library(RODBC)
library(RSQLServer)
library(ggplot2)
## Define a function to list all the folders of a directory
list.dirs <- function(path=".", pattern=NULL, all.dirs=FALSE,
full.names=FALSE, ignore.case=FALSE) {
# use full.names=TRUE to pass to file.info
all <- list.files(path, pattern, all.dirs,
full.names=TRUE, recursive=FALSE, ignore.case)
dirs <- all[file.info(all)$isdir]
# determine whether to return full names or just dir names
if(isTRUE(full.names))
return(dirs)
else
return(basename(dirs))
}
## Define the root directory of the scripts reside in
CodeDir <- "C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2"
# Set working directory to the above root
setwd(CodeDir)
AllFolders <- list.dirs(CodeDir)
AllFolders
file.sources = list.files(list.dirs(CodeDir),pattern="*.R$", full.names=TRUE,ignore.case=TRUE)
files.sources
file.sources
sapply(file.sources,source,.GlobalEnv)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/AcadiaDOE/MeltDataSum.R')
meltdata <- read.csv("AcadiaDOE/AcadiaDOEtest.csv",header = TRUE,stringsAsFactors=FALSE)
meltdata$Test_No = as.factor(meltdata$Test_No)
source('~/Dingchao/Courses/R/data/MatlabR.R')
getwd()
source('~/Dingchao/Courses/R/data/MatlabR.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/MatlabR.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
con <- 'F_SL053_0721_Alpha_141201.mat'
readMat(con)
library(R.matlab)
install.packages("R.matlab")
library(R.matlab)
con <- 'F_SL053_0721_Alpha_141201.mat'
readMat(con)
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
sparseMatrixClass=c("Matrix", "SparseM", "matrix"), verbose=FALSE))
sparseMatrixClass=c("Matrix", "SparseM", "matrix"), verbose=FALSE)
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
str(data)
data$a
data$MTC.ETV.Cmd
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
save file x
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
file < 'file.mat'
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
data <- data.frame(matrx(data))
data <- data.frame(matrx(data,byrow = T))
do.all(rbine.data.frame,data)
data <- data.frame(matrx(unlist(data),byrow = T))
data <- as.data.frame(matrx(unlist(data),byrow = T))
data <- as.data.frame(unlist(data),byrow = T)
con <- 'F_SL053_0721_Alpha_141201.mat'
data <- readMat(con,maxLength=NULL, fixNames=TRUE, drop=c("singletonLists"))
data2 <- as.data.frame(unlist(data),byrow = F)
data2 <- as.data.frame(data,byrow = F)
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
eval(parse(text="5+5"))
eval(parse("5+5"))
data$a
read.csv("play.txt")
read.table("play.txt")
a = read.table("play.txt")
a = read.csv("play.txt")
