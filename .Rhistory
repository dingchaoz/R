eval(parse("5+5"))
data$a
read.csv("play.txt")
read.table("play.txt")
a = read.table("play.txt")
a = read.csv("play.txt")
getwd()
data <- readLines("ForTim/play.txt")
table <- read.csv("ForTim/play.txt",header = F, sep = " ")
table
table <- read.table(file = "play.txt", sep = " ")
table <- read.table(file = "ForTim/play.txt", sep = " ")
?read.table()
View(table)
table <- read.csv("ForTim/play.txt",header = F, sep = "\n")
table
table$1
table[1]
table[1][271]
table[1][[271]]
table[[271]]
size(table)
len(table)
length(table)
table.type
table.size
type(table)
dim(table)
table[271]
table[[271]]
table(271)
table{271}
table(1)
as.dataframe(table)
as.data.frame.matrix(table)
table2 <- as.data.frame.matrix(table)
View(table2)
View(table)
typeof(get(table))
is.table(table)
is.data.frame(table)
table[1,2]
table[1,1]
table[2,1]
table[,1]
table[1,1]
header1 <- table[1,1]
strsplit(header1,split = " ")
as.string(header1)
toString(header1)
header1 <- toString(header1)
strsplit(header1,split = " ")
strsplit(header1,split = "\t")
strsplit(header1,split = " ",fixed = False)
strsplit(header1,split = " ",fixed = false)
strsplit(header1,split = " ",fixed = F)
strsplit(header1,split = " ",fixed = T)
strsplit(header1,split = "      ")
trim <- function (x) gsub("^\\s+|\\s+$", " ", x)
gsub(header1)
trim(header1)
header1 <- trim(header1)
strsplit(header1,split = " ",fixed = T)
strsplit(header1,split = " ")
ncol(table)
nrow(table)
gsub("[[:space:]]", "", header1)
gsub("[[:space:]]", " ", header1)
header1 <- gsub("[[:space:]]", " ", header1)
strsplit(header1,split = " ")
strsplit(header1,split = "")
strsplit(header1,split = " ")
header1 <- gsub("[[:space:]]", "_", header1)
header1
header1 <- gsub("[[:space:]]", " ", header1)
header1
header1 <- gsub("_", " ", header1)
header1
header1 <- gsub("[[:space:]]", " ", header1,fixed = TRUE)
header1
strsplit(header1,split = " ")
header1 <- gsub("[[:space:]]", " ", header1,fixed = FALSE)
strsplit(header1,split = " ")
header1 <- gsub("[[:space:]]", "", header1,fixed = FALSE)
header1
header1 <- gsub("[[:space:]]", "_", header1)
header1 <- gsub("[[:space:]]", "*", header1)
header1
header1 <- table[1,1]
header1 <- toString(header1)
header1
header1 <- gsub("[[:space:]]", "*", header1, fixed = TRUE)
header1
header1 <- gsub("\\s", "*", header1, fixed = TRUE)
header1
table <- read.csv("ForTim/play.txt",header = F, sep = "\n")  ## Break the file into single line
View(table)
colnames(table)
rownumbers(table)
dim(table)
dim(table)[1]
header1 <- toString(table[1,1]) # Test to read the first line as the header of the 1st table and convert to a string
header1
value1 <- toString(table[2,1])
value1
strsplit(row1,split = "")
strsplit(value1,split = "")
strsplit(value1,split = " ")
strsplit(value1,split = " ")[1]
strsplit(value1,split = " ")[[1]][1]
strsplit(header1,split = " ")[[1]][1]
strsplit(header1,split = " ")[[1]][1] == ""
strsplit(value1,split = " ")[[1]][1] == ""
comment1 <- toString(table[9,1])
strsplit(comment1,split = " ")[[1]][1] == ""
data.frame(header1,value1,comment1)
d1 <- data.frame(header1,value1,comment1)
d1
d1[1]
d1[2]
d1[3]
i = 1
d.i <- data.frame()
rbine(d.i,header1)
rbind(d.i,header1)
rbind(d.i,value1)
d.1
d.i
d.i <- dataframe(c(d.i,header1))
d.i <- data.frame(c(d.i,header1))
d.i
d.i <- data.frame(c(d.i,value1))
d.i
rownum <- dim(table)[1]
tablenum <- 0
for (i in 1:rownum)
{
if (strsplit( toString(table[i,1]),split = " ")[[1]][1] == "") {
d.tablenum <- data.frame(table[1,1])
tablenum = tablenum + 1
d.tablenum <- data.frame()
tablerowstart <- i
}
else{
tablerowend = tablerowstart + 1
}
}
rownum <- dim(table)[1]
tablenum <- 0
for (i in 1:rownum)
{
if (strsplit( toString(table[i,1]),split = " ")[[1]][1] == "") {
d.tablenum <- data.frame(table[1,1])
tablenum = tablenum + 1
#d.tablenum <- data.frame()
tablerowstart <- i
}
else{
tablerowend = tablerowstart + 1
}
}
View(d.tablenum)
paste0(header1," ")
gsub(" ","",header1)
gsub(" ",",",header1)
gsub(" "," ",header1)
strsplit(header1,split = "")
strsplit(header1,split = " ")
strsplit(header1,split = " ")
gsub("[[:space:]]", "", header1,fixed = true)
gsub("[[:space:]]", "", header1,fixed = True)
gsub("[[:space:]]", "", header1,fixed = T)
x <- strsplit(header1,split = " ")[[1]]
x
len(x)
dim(x)
length(x)
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
}
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
return l
}
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
}
y <- myfunction(header1)
y <- myfunction(header1[[1]])
y <- myfunction(x)
x
x[0]
x[1]
myfunction <- function(x) {
for (i in 1:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
}
y <- myfunction(x)
y
l
print(l)
print (x)
length(header1)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
install.package(dplyr)
install.packages(dplyr)
install.packages("dplyr")
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
getwd()
setwd("C:/Users/ks692/Documents/Dingchao/Courses/R/RShinyDash")
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
getwd()
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
conn
conn2 <- odbcConnect(case=nochange
DSN=Capability
UID=
Trusted_Connection=Yes
APP=RStudio
WSID=L4-S149242
DATABASE=HDPacific)
conn2 <- odbcConnect(
DSN=Capability
UID=
Trusted_Connection=Yes
APP=RStudio
WSID=L4-S149242
DATABASE=HDPacific)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
SoftwareBuild <- sqlQuery(conn,paste("Select distinct calibration from",PrgMap$Database[[1]], " .dbo.tblDataInBuild"))
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R', echo=TRUE)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
install.packages("shinyjs")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
setwd('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
shinyApp(ui = ui, server = server)
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
setwd('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
getwd()
shinyApp()
shinyApp(ui, server)
server = function(input, output) {
onclick("update", text("time", date()))
onclick("toggleAdvanced", toggle(id = "advanced", anim = TRUE))
observe({
toggleClass("myapp", "big", input$big)
})
observe({
toggleState("submit", !is.null(input$name) && input$name != "")
})
observeEvent(input$submit, {
info("Thank you!")
})
observeEvent(input$reset, {
reset("myapp")
})
}
shinyApp(ui, server)
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
),
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
)
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
shinyjs::runExample()
shinyjs::
shinyjs()
shinyApp(ui, server)
server = function(input, output) {
}
shinyApp(ui, server)
ui = fluidPage(
div(id = "myapp",
h2("shinyjs demo"),
textInput("name", "Name", ""),
numericInput("age", "Age", 30),
textInput("company", "Company", ""),
p("Timestamp: ", span(date())),
actionButton("submit", "Submit")
)
shinyApp(
ui = fluidPage(
div(id = "myapp",
h2("shinyjs demo"),
textInput("name", "Name", ""),
numericInput("age", "Age", 30),
textInput("company", "Company", ""),
p("Timestamp: ", span(date())),
actionButton("submit", "Submit")
)
),
server = function(input, output) {
}
)
runApp('app.R')
runApp('myapp')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
runApp('myapp')
library(shiny)
runApp("myapp")
getwd()
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
shiny::runGitHub("shiny-js-examples", "jcheng5", subdir="output")
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
setwd('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app3.R')
install.packages('shinydashboard')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app3.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/helper-text.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/helper-text.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/shiny-examples-master/054-nvd3-line-chart-output")
x <- "test test2 test3"
y <- strsplit(x," ")
y
y[1]
y[1][1]
y[[1]][1]
y[[1]][2]
z <- tapply(y,seq(1:len(y)),paste, collapse = "")
z <- tapply(y,seq(1:length(y)),paste, collapse = "")
z
z <- tapply(y,seq(1:length(y)),paste, collapse = " ")
z
z <- tapply(y,seq(1:length(y)),paste)
z
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/shiny-examples-master/054-nvd3-line-chart-output")
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
getwd()
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
