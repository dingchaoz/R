source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
DiagList
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('SetConn.R')
getwd()
source('/Shiny-dev/SelfTest/Version2/SetConn.R')
source('~/Shiny-dev/SelfTest/Version2/SetConn.R')
getwd()
source('~Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/SetConn.R')
source('C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/SetConn.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version1/app2.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
list.files
getwd()
list.dirs <- function(path=".", pattern=NULL, all.dirs=FALSE,
full.names=FALSE, ignore.case=FALSE) {
# use full.names=TRUE to pass to file.info
all <- list.files(path, pattern, all.dirs,
full.names=TRUE, recursive=FALSE, ignore.case)
dirs <- all[file.info(all)$isdir]
# determine whether to return full names or just dir names
if(isTRUE(full.names))
return(dirs)
else
return(basename(dirs))
}
list.dirs("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments")
list.dirs("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/Vesion2")
list.dirs("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Vesion2")
list.dirs("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2")
source("ListDir.R")
source("/ListDir.R")
getwd()
source("/ListDir.R")
source("ListDir.R")
setwd(CodeDir)
CodeDir <- "C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2"
setwd(CodeDir)
setwd(CodeDir)
source("ListDir.R")
list.dirs(CodeDir)
file.sources = list.files(list.dirs(CodeDir),
pattern="*.R$", full.names=TRUE,
ignore.case=TRUE)
sapply(file.sources,source,.GlobalEnv)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/.active-rstudio-document')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
debugSource('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
UpdateConn(input,session)
output$print <- renderPlot({
b <- length(input$Trucks)
qplot(input$Trucks,y = b,geom ="point")
## Render this exact function that takes the transformed input in the above
#ggplot(data, aes(y=b)) +
#   geom_histogram(y=b)
})
output$data <- renderPlot({
Hisplot(input)
})
}
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version1/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
conn
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version1/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R', echo=TRUE)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R', echo=TRUE)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R', echo=TRUE)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
UICreate()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/.active-rstudio-document')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
a <- list(conn,PrgMap)
a
conn <-odbcConnect("Capability")
PrgMap <- list(Programs = c("Seahawk", "DragonCC"), Database = c("Seahawk", "DragonCC"))
a <- list(conn,PrgMap)
a$conn
conn
a[1]
a["conn"]
a[conn]
a(conn)
a
a["conn"]
a[[1]]
a[[2]]
a <- list(conn = conn,PrgMap = PrgMap)
a[conn]
a["conn"]
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
meta <- InitConn()
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app3.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version1/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
library(shiny)
library(RODBC)
library(RSQLServer)
library(ggplot2)
## Define a function to list all the folders of a directory
list.dirs <- function(path=".", pattern=NULL, all.dirs=FALSE,
full.names=FALSE, ignore.case=FALSE) {
# use full.names=TRUE to pass to file.info
all <- list.files(path, pattern, all.dirs,
full.names=TRUE, recursive=FALSE, ignore.case)
dirs <- all[file.info(all)$isdir]
# determine whether to return full names or just dir names
if(isTRUE(full.names))
return(dirs)
else
return(basename(dirs))
}
## Define the root directory of the scripts reside in
CodeDir <- "C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2"
# Set working directory to the above root
setwd(CodeDir)
AllFolders <- list.dirs(CodeDir)
AllFolders
file.sources = list.files(list.dirs(CodeDir),pattern="*.R$", full.names=TRUE,ignore.case=TRUE)
files.sources
file.sources
sapply(file.sources,source,.GlobalEnv)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/Version2/app.R')
shinyApp(ui = ui, server = server)
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/AcadiaDOE/MeltDataSum.R')
meltdata <- read.csv("AcadiaDOE/AcadiaDOEtest.csv",header = TRUE,stringsAsFactors=FALSE)
meltdata$Test_No = as.factor(meltdata$Test_No)
source('~/Dingchao/Courses/R/data/MatlabR.R')
getwd()
source('~/Dingchao/Courses/R/data/MatlabR.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/MatlabR.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
con <- 'F_SL053_0721_Alpha_141201.mat'
readMat(con)
library(R.matlab)
install.packages("R.matlab")
library(R.matlab)
con <- 'F_SL053_0721_Alpha_141201.mat'
readMat(con)
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
sparseMatrixClass=c("Matrix", "SparseM", "matrix"), verbose=FALSE))
sparseMatrixClass=c("Matrix", "SparseM", "matrix"), verbose=FALSE)
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
str(data)
data$a
data$MTC.ETV.Cmd
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
save file x
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
file < 'file.mat'
source('~/Dingchao/Courses/R/R Programming/Assignments/test.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
data <- data.frame(matrx(data))
data <- data.frame(matrx(data,byrow = T))
do.all(rbine.data.frame,data)
data <- data.frame(matrx(unlist(data),byrow = T))
data <- as.data.frame(matrx(unlist(data),byrow = T))
data <- as.data.frame(unlist(data),byrow = T)
con <- 'F_SL053_0721_Alpha_141201.mat'
data <- readMat(con,maxLength=NULL, fixNames=TRUE, drop=c("singletonLists"))
data2 <- as.data.frame(unlist(data),byrow = F)
data2 <- as.data.frame(data,byrow = F)
source('~/Dingchao/Courses/R/R Programming/Assignments/readMat.R')
eval(parse(text="5+5"))
eval(parse("5+5"))
data$a
read.csv("play.txt")
read.table("play.txt")
a = read.table("play.txt")
a = read.csv("play.txt")
getwd()
data <- readLines("ForTim/play.txt")
table <- read.csv("ForTim/play.txt",header = F, sep = " ")
table
table <- read.table(file = "play.txt", sep = " ")
table <- read.table(file = "ForTim/play.txt", sep = " ")
?read.table()
View(table)
table <- read.csv("ForTim/play.txt",header = F, sep = "\n")
table
table$1
table[1]
table[1][271]
table[1][[271]]
table[[271]]
size(table)
len(table)
length(table)
table.type
table.size
type(table)
dim(table)
table[271]
table[[271]]
table(271)
table{271}
table(1)
as.dataframe(table)
as.data.frame.matrix(table)
table2 <- as.data.frame.matrix(table)
View(table2)
View(table)
typeof(get(table))
is.table(table)
is.data.frame(table)
table[1,2]
table[1,1]
table[2,1]
table[,1]
table[1,1]
header1 <- table[1,1]
strsplit(header1,split = " ")
as.string(header1)
toString(header1)
header1 <- toString(header1)
strsplit(header1,split = " ")
strsplit(header1,split = "\t")
strsplit(header1,split = " ",fixed = False)
strsplit(header1,split = " ",fixed = false)
strsplit(header1,split = " ",fixed = F)
strsplit(header1,split = " ",fixed = T)
strsplit(header1,split = "      ")
trim <- function (x) gsub("^\\s+|\\s+$", " ", x)
gsub(header1)
trim(header1)
header1 <- trim(header1)
strsplit(header1,split = " ",fixed = T)
strsplit(header1,split = " ")
ncol(table)
nrow(table)
gsub("[[:space:]]", "", header1)
gsub("[[:space:]]", " ", header1)
header1 <- gsub("[[:space:]]", " ", header1)
strsplit(header1,split = " ")
strsplit(header1,split = "")
strsplit(header1,split = " ")
header1 <- gsub("[[:space:]]", "_", header1)
header1
header1 <- gsub("[[:space:]]", " ", header1)
header1
header1 <- gsub("_", " ", header1)
header1
header1 <- gsub("[[:space:]]", " ", header1,fixed = TRUE)
header1
strsplit(header1,split = " ")
header1 <- gsub("[[:space:]]", " ", header1,fixed = FALSE)
strsplit(header1,split = " ")
header1 <- gsub("[[:space:]]", "", header1,fixed = FALSE)
header1
header1 <- gsub("[[:space:]]", "_", header1)
header1 <- gsub("[[:space:]]", "*", header1)
header1
header1 <- table[1,1]
header1 <- toString(header1)
header1
header1 <- gsub("[[:space:]]", "*", header1, fixed = TRUE)
header1
header1 <- gsub("\\s", "*", header1, fixed = TRUE)
header1
table <- read.csv("ForTim/play.txt",header = F, sep = "\n")  ## Break the file into single line
View(table)
colnames(table)
rownumbers(table)
dim(table)
dim(table)[1]
header1 <- toString(table[1,1]) # Test to read the first line as the header of the 1st table and convert to a string
header1
value1 <- toString(table[2,1])
value1
strsplit(row1,split = "")
strsplit(value1,split = "")
strsplit(value1,split = " ")
strsplit(value1,split = " ")[1]
strsplit(value1,split = " ")[[1]][1]
strsplit(header1,split = " ")[[1]][1]
strsplit(header1,split = " ")[[1]][1] == ""
strsplit(value1,split = " ")[[1]][1] == ""
comment1 <- toString(table[9,1])
strsplit(comment1,split = " ")[[1]][1] == ""
data.frame(header1,value1,comment1)
d1 <- data.frame(header1,value1,comment1)
d1
d1[1]
d1[2]
d1[3]
i = 1
d.i <- data.frame()
rbine(d.i,header1)
rbind(d.i,header1)
rbind(d.i,value1)
d.1
d.i
d.i <- dataframe(c(d.i,header1))
d.i <- data.frame(c(d.i,header1))
d.i
d.i <- data.frame(c(d.i,value1))
d.i
rownum <- dim(table)[1]
tablenum <- 0
for (i in 1:rownum)
{
if (strsplit( toString(table[i,1]),split = " ")[[1]][1] == "") {
d.tablenum <- data.frame(table[1,1])
tablenum = tablenum + 1
d.tablenum <- data.frame()
tablerowstart <- i
}
else{
tablerowend = tablerowstart + 1
}
}
rownum <- dim(table)[1]
tablenum <- 0
for (i in 1:rownum)
{
if (strsplit( toString(table[i,1]),split = " ")[[1]][1] == "") {
d.tablenum <- data.frame(table[1,1])
tablenum = tablenum + 1
#d.tablenum <- data.frame()
tablerowstart <- i
}
else{
tablerowend = tablerowstart + 1
}
}
View(d.tablenum)
paste0(header1," ")
gsub(" ","",header1)
gsub(" ",",",header1)
gsub(" "," ",header1)
strsplit(header1,split = "")
strsplit(header1,split = " ")
strsplit(header1,split = " ")
gsub("[[:space:]]", "", header1,fixed = true)
gsub("[[:space:]]", "", header1,fixed = True)
gsub("[[:space:]]", "", header1,fixed = T)
x <- strsplit(header1,split = " ")[[1]]
x
len(x)
dim(x)
length(x)
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
}
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
return l
}
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
}
y <- myfunction(header1)
y <- myfunction(header1[[1]])
y <- myfunction(x)
x
x[0]
x[1]
myfunction <- function(x) {
for (i in 1:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
}
y <- myfunction(x)
y
l
print(l)
print (x)
length(header1)
